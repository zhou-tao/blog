import{_ as e,c as o,b as s,d as n,e as a,a as i,o as p,r as t}from"./app.bc987a76.js";const B=JSON.parse('{"title":"链接文件系统：inode、硬链接和软连接","description":"","frontmatter":{},"headers":[{"level":2,"title":"inode","slug":"inode","link":"#inode","children":[]},{"level":2,"title":"链接文件","slug":"链接文件","link":"#链接文件","children":[]},{"level":2,"title":"硬链接","slug":"硬链接","link":"#硬链接","children":[]},{"level":2,"title":"软链接","slug":"软链接","link":"#软链接","children":[]},{"level":2,"title":"在 pnpm 中的应用","slug":"在-pnpm-中的应用","link":"#在-pnpm-中的应用","children":[]}],"relativePath":"en/linux/linked-file-system.md","lastUpdated":1674142373000}'),c={name:"en/linux/linked-file-system.md"},d={id:"链接文件系统-inode、硬链接和软连接",tabindex:"-1"},r=s("a",{class:"header-anchor",href:"#链接文件系统-inode、硬链接和软连接","aria-hidden":"true"},"#",-1),u=i(`<blockquote><p>前言：在任何操作系统中，除了我们平常经常接触的各类存储文件中，还包括一类特殊类型文件：<strong>链接文件</strong>。他们本质作用都是高效、快速链接到源文件。</p></blockquote><h2 id="inode" tabindex="-1">inode <a class="header-anchor" href="#inode" aria-hidden="true">#</a></h2><p>在了解链接文件之前，我们需要对文件储存结构有个基本认识，其中就涉及到<strong>inode</strong>。</p><p>文件储存在硬盘上，硬盘的最小存储单位叫做&quot;扇区&quot;（Sector）。每个扇区储存512字节（相当于0.5KB）。</p><p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个&quot;块&quot;（block）。这种由多个扇区组成的&quot;块&quot;，是文件存取的最小单位。&quot;块&quot;的大小，最常见的是4KB，即连续八个 sector组成一个 block。</p><p>文件数据都储存在&quot;块&quot;中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为&quot;索引节点&quot;。</p><p><strong>1. 存储内容</strong></p><ul><li>文件的字节数</li><li>文件拥有者的User ID</li><li>文件的Group ID</li><li>文件的读、写、执行权限</li><li>文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。</li><li>链接数，即有多少文件名指向这个inode</li><li>文件数据block的位置</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 查看 inode信息</span></span>
<span class="line"><span style="color:#82AAFF;">stat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.txt</span></span>
<span class="line"></span></code></pre></div><p><strong>2. inode大小</strong></p><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p><p>每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。</p><p><strong>3. inode号码</strong></p><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。</p><p>这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。表面上，用户通过文件名，打开文件。</p><p>实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。</p><p>使用ls -i命令，可以看到文件名对应的inode号码：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a.txt</span></span>
<span class="line"></span></code></pre></div><p><strong>4. 目录文件</strong></p><p>Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。</p><p>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ls命令只列出目录文件中的所有文件名：</span></span>
<span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ls -i命令列出整个目录文件，即文件名和inode号码：</span></span>
<span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ls -l命令列出文件的详细信息。</span></span>
<span class="line"><span style="color:#FFCB6B;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc</span></span>
<span class="line"></span></code></pre></div><p><strong>5. 作用</strong></p><p>由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。</p><ol><li><p>有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。</p></li><li><p>移动文件或重命名文件，只是改变文件名，不影响inode号码。</p></li><li><p>打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</p></li></ol><p>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p><p><strong>6. 弊端</strong></p><p>如下场景内可能是inode引起的问题：</p><p>在一台配置较低的Linux服务器（内存、硬盘比较小）的/data分区内创建文件时，系统提示磁盘空间不足，用df -h命令查看了一下磁盘使用情况，发现/data分区只使用了66%，还有12G的剩余空间，按理说不会出现这种问题。 后来用df -i查看了一下/data分区的索引节点(inode)，发现已经用满(IUsed=100%)，导致系统无法创建新目录和文件。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>/data/cache目录中存在数量非常多的小字节缓存文件，占用的Block不多，但是占用了大量的inode。</p></div><h2 id="链接文件" tabindex="-1">链接文件 <a class="header-anchor" href="#链接文件" aria-hidden="true">#</a></h2><p>Linux操作系统中的“链接文件”分为硬链接（hard link）和软链接（symbolic link）。两种链接的本质区别在于inode。</p><ul><li><p>硬链接：当系统要读取一个文件时，会先读inode信息，然后再根据inode中的信息到块领域将数据取出来。而硬链接是直接再建立一个inode链接到文件放置的块领域，即进行硬连接时该文件内容没有任何变化，只是增加了一个指向这个文件的inode，并不会额外占用磁盘空间。</p><p>硬链接存在限制：</p><ol><li>不能跨文件系统，因为不同的文件系统有不同的inode table</li><li>不能链接目录</li></ol></li><li><p>软链接：与硬链接不同，软链接是建立一个独立的文件，当读取这个链接文件时，它会把读取的行为转发到该文件所链接的文件上。举个例子：现在有一个文件a，我们做了一个软链接文件b，b指向a，当读取b时，b就会把读取的动作转发到a上，这样就读取了文件a。当我们删除文件a时，链接文件b不会被影响，但如果再次读取b时，会提示无法打开文件；然而当我们删除b时，不会对文件a造成任何影响。</p></li></ul><p>两者区别：</p><ul><li>硬链接记录的是目标的inode，软链接记录的是目标的路径。</li><li>软链接就像是快捷方式，而硬链接就像是备份。</li><li>软链接可以做跨分区的链接，而硬链接由于inode的缘故，只能在本分区中做链接。所以，软链接的使用频率要高很多。</li></ul><h2 id="硬链接" tabindex="-1">硬链接 <a class="header-anchor" href="#硬链接" aria-hidden="true">#</a></h2><p>一般情况下，文件名和inode号码是&quot;一一对应&quot;关系，每个inode号码对应一个文件名。</p><p>但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。</p><p>这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为&quot;硬链接&quot;（hard link）。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># ln命令可以创建硬链接</span></span>
<span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">源文件</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">目标文件</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做&quot;链接数&quot;，记录指向该inode的文件名总数，这时就会增加1。反过来，删除一个文件名，就会使得inode节点中的&quot;链接数&quot;减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。</p><p>这里顺便说一下目录文件的&quot;链接数&quot;。创建目录时，默认会生成两个目录项：&quot;.“和”…&quot;。前者的inode号码就是当前目录的inode号码，等同于当前目录的&quot;硬链接&quot;；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的&quot;硬链接&quot;。所以，任何一个目录的&quot;硬链接&quot;总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的“硬链接”和当前目录下的&quot;.硬链接“。</p><h2 id="软链接" tabindex="-1">软链接 <a class="header-anchor" href="#软链接" aria-hidden="true">#</a></h2><p>除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的&quot;软链接&quot;（soft link）或者&quot;符号链接（symbolic link）。</p><p>这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错：“No such file or directory”。</p><p>这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode&quot;链接数&quot;不会因此发生变化。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 创建软链接</span></span>
<span class="line"><span style="color:#FFCB6B;">ln</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">源文文件或目录</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">目标文件或目录</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 软链接 都会带-&gt; 指向原文件</span></span>
<span class="line"></span></code></pre></div><h2 id="在-pnpm-中的应用" tabindex="-1">在 pnpm 中的应用 <a class="header-anchor" href="#在-pnpm-中的应用" aria-hidden="true">#</a></h2>`,48);function h(y,C,g,A,b,q){const l=t("Badge");return p(),o("div",null,[s("h1",d,[n("链接文件系统：inode、硬链接和软连接 "),a(l,{text:"转"}),n(),r]),u])}const m=e(c,[["render",h]]);export{B as __pageData,m as default};
