import{_ as a,M as e,p as t,q as p,R as n,t as o,N as c,a1 as i}from"./framework-fee247ae.js";const l={},r={id:"expression-conversion",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#expression-conversion","aria-hidden":"true"},"#",-1),u=i(`<blockquote><p>掌握这些表达式转换技巧，让你的代码简洁而优雅！</p></blockquote><h3 id="falsy值" tabindex="-1"><a class="header-anchor" href="#falsy值" aria-hidden="true">#</a> <code>falsy</code>值</h3><p>常用于代码中条件判断，利用好<code>falsy</code>值有利于高效处理业务逻辑判断，而不熟练掌握要么代码臃肿要么经常产出判断BUG（一般这种条件判断的bug都挺严重的😄），如下列举常见的一些<code>falsy</code>值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;&#39;</span>
<span class="token number">0</span>
<span class="token keyword">null</span>
<span class="token boolean">false</span>
<span class="token keyword">undefined</span>

<span class="token comment">// **常见误区</span>
<span class="token operator">-</span><span class="token number">1</span>  <span class="token comment">// 只有0为falsy</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 数组时一个对象</span>
<span class="token string">&#39; &#39;</span> <span class="token comment">// 非空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="的作用" tabindex="-1"><a class="header-anchor" href="#的作用" aria-hidden="true">#</a> <code>()</code>的作用</h3><p>括号在js语法中用作函数标识符或者运算优先级标识符但在有些地方可以被当做转义表达式使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">// 使用括号简化 用等于以上结果</span>
<span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用小括号包住的作用就是相当于告诉js编译器，括号里面是一段表达式而不是常规的语法。</p><p>使用这个技巧的好处的可以在做数据转换时，简化代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment">// =&gt; [{ studentName: &#39;tom&#39; }, ...]</span>
<span class="token keyword">const</span> students <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">studentName</span><span class="token operator">:</span> u<span class="token punctuation">.</span>name
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 而不需要如此</span>
<span class="token keyword">const</span> students <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">studentName</span><span class="token operator">:</span> u<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>类型转换有很多种方法，这里介绍几种不常见但是非常简洁的方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>
<span class="token comment">// 字符串 转为 数字</span>
<span class="token operator">+</span>str <span class="token comment">//1</span>
str<span class="token operator">*</span><span class="token number">1</span> <span class="token comment">//1</span>

<span class="token comment">// 任意类型 转为 boolean</span>
<span class="token operator">!</span><span class="token operator">!</span>str <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(v,m){const s=e("Badge");return t(),p("div",null,[n("h1",r,[d,o(" expression conversion "),c(s,{text:"进阶"})]),u])}const h=a(l,[["render",k],["__file","index.html.vue"]]);export{h as default};
