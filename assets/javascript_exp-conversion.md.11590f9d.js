import{_ as l,E as p,o,c as e,k as a,a as s,J as t,S as c}from"./chunks/framework.8730e13d.js";const _=JSON.parse('{"title":"表达式转换","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/exp-conversion.md","filePath":"javascript/exp-conversion.md","lastUpdated":1692457029000}'),r={name:"javascript/exp-conversion.md"},y={id:"表达式转换",tabindex:"-1"},D=a("a",{class:"header-anchor",href:"#表达式转换","aria-label":'Permalink to "表达式转换 <Badge text="进阶" />"'},"​",-1),C=c(`<blockquote><p>掌握这些表达式转换技巧，让你的代码简洁而优雅！</p></blockquote><h2 id="falsy值" tabindex="-1"><code>falsy</code>值 <a class="header-anchor" href="#falsy值" aria-label="Permalink to &quot;\`falsy\`值&quot;">​</a></h2><p>常用于代码中条件判断，利用好<code>falsy</code>值有利于高效处理业务逻辑判断，而不熟练掌握要么代码臃肿要么经常产出判断BUG（一般这种条件判断的bug都挺严重的😄），如下列举常见的一些<code>falsy</code>值：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">&#39;&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">null</span></span>
<span class="line"><span style="color:#82AAFF;">false</span></span>
<span class="line"><span style="color:#FFCB6B;">undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">**</span><span style="color:#C3E88D;">常见误区</span></span>
<span class="line"><span style="color:#FFCB6B;">-1</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">只有0为falsy</span></span>
<span class="line"><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">  // 数组时一个对象</span></span>
<span class="line"><span style="color:#FFCB6B;">&#39; &#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">非空</span></span></code></pre></div><h2 id="的作用" tabindex="-1"><code>()</code>的作用 <a class="header-anchor" href="#的作用" aria-label="Permalink to &quot;\`()\`的作用&quot;">​</a></h2><p>括号在js语法中用作函数标识符或者运算优先级标识符但在有些地方可以被当做转义表达式使用。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用括号简化 用等于以上结果</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>这里使用小括号包住的作用就是相当于告诉js编译器，括号里面是一段表达式而不是常规的语法。</p><p>使用这个技巧的好处的可以在做数据转换时，简化代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> users </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">tom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jerry</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; [{ studentName: &#39;tom&#39; }, ...]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> students </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> users</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">u</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">studentName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 而不需要如此</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> students2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> users</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">u</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    studentName</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">u</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>类型转换有很多种方法，这里介绍几种不常见但是非常简洁的方式。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 字符串 转为 数字</span></span>
<span class="line"><span style="color:#89DDFF;">;+</span><span style="color:#A6ACCD;">str </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 任意类型 转为 boolean</span></span>
<span class="line"><span style="color:#89DDFF;">!!</span><span style="color:#A6ACCD;">str </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div>`,13);function i(A,F,d,u,h,f){const n=p("Badge");return o(),e("div",null,[a("h1",y,[s("表达式转换 "),t(n,{text:"进阶"}),s(),D]),C])}const E=l(r,[["render",i]]);export{_ as __pageData,E as default};
